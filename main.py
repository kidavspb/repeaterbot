import time
from utils.init import *
from utils.commands import *
from utils.other import beautiful_numeral


while True:
    try:
        @bot.message_handler(commands=['start'])
        def welcome_menu(message):
            if message.from_user.id in white_list_manager.get_data():
                bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã")
                # bot.send_message(message.from_user.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=create_menu_markup())
                logging.info(f"Start message from user in white list @{message.from_user.username}")
            else:
                # bot.send_message(message.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")
                logging.info(f"Start message from user not in white list @{message.from_user.username}")


        # def create_menu_markup():
        #     markup = telebot.types.InlineKeyboardMarkup()
        #
        #     btn1 = telebot.types.InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send")
        #     # btn2 = telebot.types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit")
        #     # btn3 = telebot.types.InlineKeyboardButton("ü™ì –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete")
        #
        #     markup.add(btn1)
        #     # markup.add(btn2)
        #     # markup.add(btn3)
        #
        #     return markup


        @bot.message_handler(content_types=['new_chat_members'],
                             func=lambda message: message.chat.id not in chats_manager.get_data())
        def added_to_new_chat(message):
            for member in message.new_chat_members:
                if member.id == BOT_ID:
                    new_id = message.chat.id
                    new_title = message.chat.title
                    bot.send_message(ADMIN_ID, f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: \"{new_title}\"({new_id})" + "\n\n" +
                                     f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/add_chat {new_id} {new_title}</code>",
                                     parse_mode="HTML")


        def forward_or_copy(chat_id, message):  # TODO: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ–¥–∏–∞
            if message.forward_from_chat:
                bot.forward_message(chat_id, message.chat.id, message.id)
            else:
                bot.copy_message(chat_id, message.chat.id, message.id)


        def repeater(message):  # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
            not_sent = []
            for chat_id in chats_manager.get_data():
                try:
                    forward_or_copy(chat_id, message)
                except Exception as e:
                    not_sent.append(chat_id)
                    logging.error(f"Something wrong with chat {chat_id}")
                    logging.error(e)
            return not_sent


        def tell_mailing_result(message_id, user, not_sent):  # —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            successful_count = len(chats_manager.get_data()) - len(not_sent)
            if successful_count == 0:
                result_text = f"‚ùåÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                logging.error(f"Message not sent by @{user.username}")
            elif len(not_sent) == 0:
                result_text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ {beautiful_numeral(successful_count)}"
                logging.info(f"Message sent to all {successful_count} chats by @{user.username}")
            else:
                result_text = ((f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {beautiful_numeral(successful_count)}. "
                               f"–ù–æ –≤ –µ—â–µ {beautiful_numeral(len(not_sent))} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: ")
                               + ", ".join(chats_manager.get_data()[chat_id] for chat_id in not_sent))
                logging.error(f"Message sent to {successful_count} chats except {len(not_sent)}: id{not_sent} by @{user.username}")

            bot.send_message(user.id, result_text, reply_to_message_id=message_id)
            return successful_count


        def notify(message, successful_count):  # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–ª–µ–Ω–∞–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            if successful_count == 0:
                info_part = f"üëÜ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ—Ç–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ –Ω–µ —Å–º–æ–≥ @{message.from_user.username} ({message.from_user.full_name})"
            else:
                info_part = f"üëÜ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {beautiful_numeral(successful_count)} –æ—Ç–ø—Ä–∞–≤–∏–ª @{message.from_user.username} ({message.from_user.full_name})"
            for user_id in white_list_manager.get_data():
                try:
                    if user_id == message.from_user.id:
                        continue
                    else:
                        msg = bot.send_message(user_id, message.text, entities=message.entities)
                        bot.send_message(user_id, info_part, reply_to_message_id=msg.id)
                except Exception as e:
                    logging.error(f"Something wrong with member {user_id}")
                    logging.error(e)


        @bot.message_handler(content_types=['text', 'audio', 'document', 'photo', 'sticker',
                                            'video', 'video_note', 'voice', 'location', 'contact'],
                             func=lambda message: (message.from_user.id in white_list_manager.get_data() and
                                                   message.chat.type == "private"))
        def make_propagation(message):
            not_sent = repeater(message)
            successful_count = tell_mailing_result(message.id, message.from_user, not_sent)
            notify(message, successful_count)

            # bot.send_message(message.from_user.id,  # TODO: –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?
            #                  "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Ç–æ—á–Ω–æ –≤ —Ç–∞–∫–æ–º –∂–µ –≤–∏–¥–µ, –∫–∞–∫ –≤—ã –µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∏. –û—Ç–ø—Ä–∞–≤–∏—Ç—å?",
            #                  reply_markup=create_response_markup_type(message.text))


        # def create_response_markup_type(text):
        #     markup = telebot.types.InlineKeyboardMarkup()
        #     markup.add(telebot.types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ —á–∞—Ç—ã", callback_data="{\"action\":\"send\",\"text\":\"" + str(text) + "\"}"),
        #                telebot.types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="Cancel"))
        #     return markup
        #
        # @bot.callback_query_handler(func=lambda call: True)
        # def callback(call):
        #     if "send" in call.data:
        #         json_string = json.loads(call.data)
        #         text = json_string['text']
        #
        #         for chat_id in CHATS_LIST:
        #             bot.send_message(chat_id, text)
        #
        #         bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        #         bot.send_message(call.message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã")
        #     elif call.data == "Cancel":
        #         # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text)
        #         bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=None)
        #         bot.send_message(call.message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ üëå")

        logging.info("Bot running..")
        bot.polling(none_stop=True)

    except Exception as e:
        logging.error(e)
        bot.stop_polling()

        time.sleep(15)

        logging.info("Running again!")
