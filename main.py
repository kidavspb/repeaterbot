import time
from datetime import datetime

from utils.init import *
from utils.commands import *
from utils.other import beautiful_numeral

while True:
    try:
        @bot.message_handler(commands=['start'], chat_types=['private'])
        def welcome_menu(message):
            if message.from_user.id in white_list_manager.get_data():
                bot.send_message(message.from_user.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=create_menu_markup())
                logging.info(f"Start message from user in white list @{message.from_user.username}")
            else:
                logging.info(f"Start message from user not in white list @{message.from_user.username}")


        def create_menu_markup():
            markup = telebot.types.InlineKeyboardMarkup()

            btn1 = telebot.types.InlineKeyboardButton("üì¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send")
            btn2 = telebot.types.InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="edit")
            btn3 = telebot.types.InlineKeyboardButton("ü™ì –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="delete")

            markup.add(btn1)
            markup.add(btn2)
            markup.add(btn3)

            return markup

        @bot.message_handler(content_types=['new_chat_members'],
                             func=lambda message: message.chat.id not in chats_manager.get_data())
        def added_to_new_chat(message):
            for member in message.new_chat_members:
                if member.id == BOT_ID:
                    new_id = message.chat.id
                    new_title = message.chat.title
                    bot.send_message(ADMIN_ID, f"–ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç: \"{new_title}\"({new_id})" + "\n\n" +
                                     f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: <code>/add_chat {new_id} {new_title}</code>",
                                     parse_mode="HTML")


        def forward_or_copy(chat_id, message):  # TODO: –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ–¥–∏–∞
            if message.forward_from_chat:
                return bot.forward_message(chat_id, message.chat.id, message.id)
            else:
                return bot.copy_message(chat_id, message.chat.id, message.id)


        def repeater(message):  # –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
            not_sent = []

            chat_ids = []
            msg_ids = []
            for chat_id in chats_manager.get_data():
                try:
                    msg_id = forward_or_copy(chat_id, message).message_id
                    chat_ids.append(chat_id)
                    msg_ids.append(msg_id)
                except Exception as e:
                    not_sent.append(chat_id)
                    logging.error(f"Something wrong with chat {chat_id}")
                    logging.error(e)
            messages_manager.add_data(hash(message), {"chat_ids": chat_ids, "msg_ids": msg_ids})
            return not_sent


        def tell_mailing_result(message_id, message_hash, user, not_sent):  # —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É —Ä–∞—Å—Å—ã–ª–∫–∏ –æ –µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            successful_count = len(chats_manager.get_data()) - len(not_sent)
            if successful_count == 0:
                result_text = f"‚ùåÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                logging.error(f"Message not sent by @{user.username}")
            elif len(not_sent) == 0:
                result_text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ {beautiful_numeral(successful_count)}"
                logging.info(f"Message sent to all {successful_count} chats by @{user.username}")
            else:
                result_text = ((f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {beautiful_numeral(successful_count)}. "
                                f"–ù–æ –µ—â–µ –≤ {beautiful_numeral(len(not_sent))} –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å: ")
                               + ", ".join(chats_manager.get_data()[chat_id] for chat_id in not_sent))
                logging.error(
                    f"Message sent to {successful_count} chats except {len(not_sent)}: id{not_sent} by @{user.username}")

            result_text += f"\n\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: <code>{message_hash}</code>"
            bot.send_message(user.id, result_text, reply_to_message_id=message_id, parse_mode="HTML")
            return successful_count


        def notify(message, successful_count):  # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —á–ª–µ–Ω–∞–º –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –æ —Ä–∞—Å—Å—ã–ª–∫–µ
            if successful_count == 0:
                info_part = f"üëÜ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ö–æ—Ç–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –Ω–æ –Ω–µ —Å–º–æ–≥ @{message.from_user.username} ({message.from_user.full_name})"
            else:
                info_part = f"üëÜ –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {beautiful_numeral(successful_count)} –æ—Ç–ø—Ä–∞–≤–∏–ª @{message.from_user.username} ({message.from_user.full_name})"
            info_part += f"\n\n–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: <code>{hash(message)}</code>"
            for user_id in white_list_manager.get_data():
                try:
                    if user_id == message.from_user.id:
                        continue
                    else:
                        msg = bot.send_message(user_id, message.text, entities=message.entities)
                        bot.send_message(user_id, info_part, reply_to_message_id=msg.id, parse_mode="HTML")
                except Exception as e:
                    logging.error(f"Something wrong with member {user_id}")
                    logging.error(e)


        def make_propagation(message):
            if message.text == "/cancel":
                logging.info(f"Cancel message from user @{message.from_user.username}")
                bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            not_sent = repeater(message)
            successful_count = tell_mailing_result(message.id, hash(message), message.from_user, not_sent)
            notify(message, successful_count)


        def too_late(message):
            if 23 <= datetime.now().hour or datetime.now().hour < 7:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.chat.id,
                                 "–°–µ–π—á–∞—Å –Ω–æ—á—å, –≤—Å–µ —Å–ø—è—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
                                 reply_markup=create_confirmation_markup())
                return True
            else:
                return False


        def create_confirmation_markup():
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton("‚úÖ –î–∞", callback_data="send_now"),
                       telebot.types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="—Åancel"))
            return markup

        def delete_propagation(message):
            if message.text == "/cancel":
                logging.info(f"Cancel message from user @{message.from_user.username}")
                bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            try:
                message_hash = int(message.text)
                this_message = messages_manager.get_data()[message_hash]
                for chat_id, msg_id in zip(this_message["chat_ids"], this_message["msg_ids"]):
                    bot.delete_message(chat_id, msg_id)
                messages_manager.del_data(message_hash)
                bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–æ", reply_to_message_id=message.message_id)
                logging.info(f"Message deleted by @{message.from_user.username}")
            except KeyError:
                bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∏ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_to_message_id=message.message_id)
                logging.error(f"Message not found by @{message.from_user.username}")
            except Exception as e:
                logging.error(f"Something wrong when @{message.from_user.username} tried to delete message with hash {message_hash}")
                logging.error(e)

        def edit_propagation2(new_message, this_message):
            if new_message.text == "/cancel":
                logging.info(f"Cancel message from user @{new_message.from_user.username}")
                bot.send_message(new_message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            try:
                for chat_id, msg_id in zip(this_message["chat_ids"], this_message["msg_ids"]):
                    bot.edit_message_text(chat_id=chat_id, message_id=msg_id,
                                          text=new_message.text, entities=new_message.entities)
                # messages_manager.del_data(hash(this_message))  # TODO: –Ω–∞–¥–æ –ª–∏ –º–µ–Ω—è—Ç—å —Ö—ç—à?
                # messages_manager.add_data(hash(message), {"chat_ids": this_message["chat_ids"], "msg_ids": this_message["msg_ids"]})
                bot.send_message(new_message.chat.id, "–ò–∑–º–µ–Ω–µ–Ω–æ", reply_to_message_id=new_message.message_id)
                logging.info(f"Message edited by @{new_message.from_user.username}")
            except Exception as e:
                logging.error(f"Something wrong when @{new_message.from_user.username} tried to edit message")
                logging.error(e)

        def edit_propagation1(message):
            if message.text == "/cancel":
                logging.info(f"Cancel message from user @{message.from_user.username}")
                bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
                return
            try:
                message_hash = int(message.text)
                this_message = messages_manager.get_data()[message_hash]
                bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
                bot.register_next_step_handler(message, lambda new_message: edit_propagation2(new_message, this_message))
            except KeyError:
                bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∫–∏ —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_to_message_id=message.message_id)
                logging.error(f"Message not found by @{message.from_user.username}")
            except Exception as e:
                logging.error(f"Something wrong when @{message.from_user.username} tried to edit message with hash {message_hash}")
                logging.error(e)

        @bot.callback_query_handler(func=lambda call: True)
        def callback(call):
            if call.data == "send_now" or (call.data == "send" and not too_late(call.message)):
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          text="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ —á–∞—Ç—ã")
                    bot.register_next_step_handler(call.message, make_propagation)
            elif call.data == "—Åancel":
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ üëå")
            elif call.data == "delete":
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text="–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å")
                bot.register_next_step_handler(call.message, delete_propagation)
            elif call.data == "edit":
                bot.edit_message_text(chat_id=call.message.chat.id,
                                      message_id=call.message.message_id,
                                      text="–ù–∞–ø–∏—à–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–∞—Å—Å—ã–ª–∫–∏, —Ç–µ–∫—Å—Ç –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
                bot.register_next_step_handler(call.message, edit_propagation1)





        logging.info("Bot running..")
        bot.polling(none_stop=True)

    except Exception as e:
        logging.error(e)
        bot.stop_polling()

        time.sleep(15)

        logging.info("Running again!")
